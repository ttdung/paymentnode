syntax = "proto3";
package node;
option go_package = "github.com/ttdung/paymentchannel";

import "google/protobuf/struct.proto";

enum ConnectionStatus {
  OPEN = 0;
  CLOSE = 1;
}

enum MsgType {
  ERROR = 0;
  CONFIRM_OPENCHANNEL = 1;
  RESPONSEDATA = 2;
  REQ_PAYMENT = 3;
  REG_CHANNEL = 4;
  MSG_CLOSE = 5;
}

service Node {
  rpc RequestOpenChannel(MsgReqOpenChannel) returns (MsgResOpenChannel) {};
  rpc ConfirmOpenChannel(MsgConfirmOpenChannel) returns(MsgResConfirmOpenChannel) {};
  rpc RequestPayment(MsgReqPayment) returns (MsgResPayment) {};
  rpc ConfirmPayment(MsgConfirmPayment) returns (MsgResConfirmPayment) {};

  rpc RequestUserRegister(MsgReqUserRegister) returns (MsgResUserRegister) {};
//  rpc Register(MsgRegisterRequest) returns (MsgRegisterResponse) {};
  rpc OpenStream(stream Msg) returns (stream Msg) {};
}

message Msg {
  MsgType Type = 1;
  bytes Data = 2;
}

message MsgRequest {
  string cmd = 1;
  google.protobuf.Struct data = 2;
}

message MsgResponse {
  uint32 code = 1;
  google.protobuf.Struct data = 2;
}

message MsgReqUserRegister {
  string Pubkey = 1;
  string Addr = 2;
  uint32 sequence = 3;
}

message MsgResUserRegister {
  bool Result = 1;
  string Pubkey = 2;
  string ChannelID = 3;
  string Memo = 4;
}

message MsgReqPayment {
  uint32 Type = 1; // 0 multihop, 1 singlehop
  string Sender_addr = 2;
  string ChannelID = 3;
  repeated uint64 SendAmt = 4;
  repeated uint64 RecvAmt = 5;
  string Hashcode = 6;
  string CommitmentID = 7;
  string Commitment_sig = 8;
}

message MsgResPayment {
  string ChannelID = 1;
  string CommitmentID = 2;
  string Commitment_sig = 3;
  string SecretPreComm = 4;
}

message MsgConfirmPayment {
  string ChannelID = 1;
  string CommID = 2;
  string SecretPreComm = 3;
}

message MsgResConfirmPayment {
  string ChannelID = 1;
  string CommID = 2;
  MsgType type = 3;
  string Data = 4;
}

message MsgConfirmOpenChannel {
  MsgType Type = 1;
  string ChannelID = 2;
  string Commitment_sig = 3;
  string OpenChannelTx_sig = 4;
}

message MsgResConfirmOpenChannel {
  uint32 Code = 2;
  string TxHash = 3;
  string Data = 4;
  uint64 TxFee = 5;
}

message MsgReqOpenChannel {
  string Version = 1;
  string PartA_Addr = 2;
  string PartB_Addr = 3;
  string PubkeyA = 4;
  repeated uint64 Deposit_Amt = 5;
  repeated string Denom = 6;
  string Hashcode = 7;
  string peerNodeAddr = 8; // IP:port
  repeated uint64 FirstSend = 9;
  repeated uint64 FirstRecv = 10;
  uint64 Sequence = 11;
}

message MsgResOpenChannel {
  string Pubkey = 1;
  repeated uint64 Deposit_Amt = 2;
  repeated string Denom = 3;
  string Hashcode = 4;
  string Commitment_Sig = 5;
  uint64 Nonce = 6;
}



